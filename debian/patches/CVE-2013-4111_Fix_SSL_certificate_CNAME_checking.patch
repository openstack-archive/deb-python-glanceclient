Description: Fix SSL certificate CNAME checking
 Currently, accessing a host via ip address will pass SSL verification;
 the CNAME is not checked as intended as part of verify_callback.
 .
 'preverify_ok is True' will always return false (int/bool comparison).
 preverify_ok will be 1 if preverification has passed.
Author: Thomas Leaman <thomas.leaman@hp.com>
Origin: upstream, https://review.openstack.org/#/c/33464/
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/1192229
Last-Update: 2013-07-30

--- python-glanceclient-0.9.0.orig/tests/test_ssl.py
+++ python-glanceclient-0.9.0/tests/test_ssl.py
@@ -125,7 +125,7 @@ class TestVerifiedHTTPSConnection(testto
         self.assertEqual(cert.get_subject().commonName, '0.0.0.0')
         try:
             conn = http.VerifiedHTTPSConnection('0.0.0.0', 0)
-            conn.verify_callback(None, cert, 0, 0, True)
+            conn.verify_callback(None, cert, 0, 0, 1)
         except:
             self.fail('Unexpected exception.')
 
@@ -140,13 +140,13 @@ class TestVerifiedHTTPSConnection(testto
         self.assertEqual(cert.get_subject().commonName, '0.0.0.0')
         try:
             conn = http.VerifiedHTTPSConnection('alt1.example.com', 0)
-            conn.verify_callback(None, cert, 0, 0, True)
+            conn.verify_callback(None, cert, 0, 0, 1)
         except:
             self.fail('Unexpected exception.')
 
         try:
             conn = http.VerifiedHTTPSConnection('alt2.example.com', 0)
-            conn.verify_callback(None, cert, 0, 0, True)
+            conn.verify_callback(None, cert, 0, 0, 1)
         except:
             self.fail('Unexpected exception.')
 
--- python-glanceclient-0.9.0.orig/glanceclient/common/http.py
+++ python-glanceclient-0.9.0/glanceclient/common/http.py
@@ -317,11 +317,13 @@ class VerifiedHTTPSConnection(httplib.HT
 
     def verify_callback(self, connection, x509, errnum,
                         depth, preverify_ok):
+        # NOTE(leaman): preverify_ok may be a non-boolean type
+        preverify_ok = bool(preverify_ok)
         if x509.has_expired():
             msg = "SSL Certificate expired on '%s'" % x509.get_notAfter()
             raise exc.SSLCertificateError(msg)
 
-        if depth == 0 and preverify_ok is True:
+        if depth == 0 and preverify_ok:
             # We verify that the host matches against the last
             # certificate in the chain
             return self.host_matches_cert(self.host, x509)
